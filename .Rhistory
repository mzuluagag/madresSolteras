View(count)
ggplot(count, aes(x = "¿Siente que vale la pena lo que hace?", y = "Frecuencia")) +
geom_bar(stat = "identity") +
geom_text(aes(label = sprintf("%.2f%%", Freq/sum(Freq) * 100)),
vjust = -.5)
ggplot(count, aes(x = Var1, y = Freq)) +
geom_bar(stat = "identity") +
geom_text(aes(label = sprintf("%.2f%%", Freq/sum(Freq) * 100)),
vjust = -.5)
ggplot(count, aes(x = Var1, y = Freq)) +
geom_bar(stat = "identity",color="steelbar4") +
geom_text(aes(label = sprintf("%.2f%%", Freq/sum(Freq) * 100)),
vjust = -.5)
ggplot(count, aes(x = Var1, y = Freq)) +
geom_bar(stat = "identity",color="steelblue4") +
geom_text(aes(label = sprintf("%.2f%%", Freq/sum(Freq) * 100)),
vjust = -.5)
ggplot(count, aes(x = Var1, y = Freq)) +
geom_bar(stat = "identity",colour="steelblue4") +
geom_text(aes(label = sprintf("%.2f%%", Freq/sum(Freq) * 100)),
vjust = -.5)
ggplot(count, aes(x = Var1, y = Freq)) +
geom_bar(stat = "identity",colour="steelblue4",fill="steelblue4") +
geom_text(aes(label = sprintf("%.2f%%", Freq/sum(Freq) * 100)),
vjust = -.5)
ggplot(count, aes(x = Var1, y = Freq)) +
geom_bar(stat = "identity",colour="steelblue4",fill="steelblue4") +
geom_text(aes(label = sprintf("%.2f%%", Freq/sum(Freq) * 100)),
vjust = -.5)+labs(x=""¿Siente que vale la pena lo que hace?",y="Frecuencia",main="Vale la pena lo que hace - Madres solteras jefe de hogar")
ggplot(count, aes(x = Var1, y = Freq)) +
geom_bar(stat = "identity",colour="steelblue4",fill="steelblue4") +
geom_text(aes(label = sprintf("%.2f%%", Freq/sum(Freq) * 100)),
vjust = -.5)+labs(x="¿Siente que vale la pena lo que hace?",y="Frecuencia",main="Vale la pena lo que hace - Madres solteras jefe de hogar")
ggplot(count, aes(x = Var1, y = Freq)) +
geom_bar(stat = "identity",colour="steelblue4",fill="steelblue4") +
geom_text(aes(label = sprintf("%.2f%%", Freq/sum(Freq) * 100)),
vjust = -.5)+labs(x="¿Siente que vale la pena lo que hace?",y="Frecuencia",title="Vale la pena lo que hace - Madres solteras jefe de hogar")
count<-table(total$P8587)
ggplot(count, aes(x = Var1, y = Freq)) +
geom_bar(stat = "identity",colour="chartreuse",fill="chartreuse") +
geom_text(aes(label = sprintf("%.2f%%", Freq/sum(Freq) * 100)),
vjust = -.5)+labs(x="Nivel máximo de educación alcanzado",y="Frecuencia",title="Nivel eduación - Madres solteras jefe de hogar")
count<-as.data.frame(count)
ggplot(count, aes(x = Var1, y = Freq)) +
geom_bar(stat = "identity",colour="chartreuse",fill="chartreuse") +
geom_text(aes(label = sprintf("%.2f%%", Freq/sum(Freq) * 100)),
vjust = -.5)+labs(x="Nivel máximo de educación alcanzado",y="Frecuencia",title="Nivel eduación - Madres solteras jefe de hogar")
ggplot(count, aes(x = Var1, y = Freq)) +
geom_bar(stat = "identity",colour="darkorange1",fill="darkorange1") +
geom_text(aes(label = sprintf("%.2f%%", Freq/sum(Freq) * 100)),
vjust = -.5)+labs(x="Nivel máximo de educación alcanzado",y="Frecuencia",title="Nivel eduación - Madres solteras jefe de hogar")
boxplot(total$P8595)
boxplot(total$P8587)
ggplot(count, aes(x = Var1, y = Freq)) +
geom_bar(stat = "identity",colour="darkorange1",fill="darkorange1") +
geom_text(aes(label = sprintf("%.2f%%", Freq/sum(Freq) * 100)),
vjust = -.5)+labs(x="Nivel máximo de educación alcanzado",y="Frecuencia",title="Nivel eduación - Madres solteras jefe de hogar")
boxplot(total$P8587)
ggplot(count, aes(x = Var1, y = Freq)) +
geom_bar(stat = "identity",colour="darkorange1",fill="darkorange1") +
geom_text(aes(label = sprintf("%.2f%%", Freq/sum(Freq) * 100)),
vjust = -.5)+labs(x="Nivel máximo de educación alcanzado",y="Frecuencia",title="Nivel eduación - Madres solteras jefe de hogar")
ggplot(count, aes(x = Var1, y = Freq)) +
geom_bar(stat = "identity",colour="darkorange1",fill="darkorange1") +
geom_text(aes(label = sprintf("%.2f%%", Freq/sum(Freq) * 100)),
vjust = -.5)+labs(x="Nivel máximo de educación alcanzado",y="Frecuencia",title="Nivel eduación - Madres solteras jefe de hogar")+scale_fill_continuous(guide = guide_legend())
ggplot(count, aes(x = Var1, y = Freq)) +
geom_bar(stat = "identity",colour="darkorange1",fill="darkorange1") +
geom_text(aes(label = sprintf("%.2f%%", Freq/sum(Freq) * 100)),
vjust = -.5)+labs(x="Nivel máximo de educación alcanzado",y="Frecuencia",title="Nivel eduación - Madres solteras jefe de hogar")+guides(fill = guide_legend(label.position = "left", label.hjust = 1))
ggplot(count, aes(x = Var1, y = Freq)) +
geom_bar(stat = "identity",colour="darkorange1",fill="darkorange1") +
geom_text(aes(label = sprintf("%.2f%%", Freq/sum(Freq) * 100)),
vjust = -.5)+labs(x="Nivel máximo de educación alcanzado",y="Frecuencia",title="Nivel eduación - Madres solteras jefe de hogar")+scale_colour_manual(name="Line Color",
values=c(myline1="red", myline2="blue", myline3="purple"))
ggplot(count, aes(x = Var1, y = Freq)) +
geom_bar(stat = "identity",colour="darkorange1",fill="darkorange1") +
geom_text(aes(label = sprintf("%.2f%%", Freq/sum(Freq) * 100)),
vjust = -.5)+labs(x="Nivel máximo de educación alcanzado",y="Frecuencia",title="Nivel eduación - Madres solteras jefe de hogar")+scale_colour_manual(name="Line Color",
values=c(1="red", myline2="blue", myline3="purple"))
ggplot(count, aes(x = Var1, y = Freq)) +
geom_bar(stat = "identity",colour="darkorange1",fill="darkorange1") +
geom_text(aes(label = sprintf("%.2f%%", Freq/sum(Freq) * 100)),
vjust = -.5)+labs(x="Nivel máximo de educación alcanzado",y="Frecuencia",title="Nivel eduación - Madres solteras jefe de hogar")+scale_colour_manual(name="Line Color",
values=c(m1="red", myline2="blue", myline3="purple"))
View(total)
count<-table(total$P5230)
count<-as.data.frame(count)
ggplot(count, aes(x = Var1, y = Freq)) +
geom_bar(stat = "identity",colour="lightcoral",fill="lightcoral") +
+geom_text(aes(label = sprintf("%.2f%%", Freq/sum(Freq) * 100)),
+vjust = -.5)+labs(x="¿Se considera pobre?",y="Frecuencia",title="Pobreza - Madres solteras jefe de hogar")
count<-table(total$P8587)
count<-as.data.frame(count)
ggplot(count, aes(x = Var1, y = Freq)) +
geom_bar(stat = "identity",colour="darkorange1",fill="darkorange1") +
+geom_text(aes(label = sprintf("%.2f%%", Freq/sum(Freq) * 100)),
+vjust = -.5)+labs(x="Nivel máximo de educación alcanzado",y="Frecuencia",title="Nivel eduación - Madres solteras jefe de hogar")
count<-table(total$P8587)
count<-as.data.frame(count)
ggplot(count, aes(x = Var1, y = Freq)) +
geom_bar(stat = "identity",colour="darkorange1",fill="darkorange1") +
+geom_text(aes(label = sprintf("%.2f%%", Freq/sum(Freq) * 100)),
+vjust = -.5)+labs(x="Nivel máximo de educación alcanzado",y="Frecuencia",title="Nivel eduación - Madres solteras jefe de hogar")
count<-table(total$P8587)
count<-as.data.frame(count)
ggplot(count, aes(x = Var1, y = Freq)) +
geom_bar(stat = "identity",colour="darkorange1",fill="darkorange1") +
+geom_text(aes(label = sprintf("%.2f%%", Freq/sum(Freq) * 100)),
vjust = -.5)+labs(x="Nivel máximo de educación alcanzado",y="Frecuencia",title="Nivel eduación - Madres solteras jefe de hogar")
count<-table(total$P5230)
count<-as.data.frame(count)
ggplot(count, aes(x = Var1, y = Freq)) +
geom_bar(stat = "identity",colour="lightcoral",fill="lightcoral") +
+geom_text(aes(label = sprintf("%.2f%%", Freq/sum(Freq) * 100)),
vjust = -.5)+labs(x="¿Se considera pobre?",y="Frecuencia",title="Pobreza - Madres solteras jefe de hogar")
count<-table(total$P5230)
count<-as.data.frame(count)
ggplot(count, aes(x = Var1, y = Freq)) +
geom_bar(stat = "identity",colour="lightcoral",fill="lightcoral") +
geom_text(aes(label = sprintf("%.2f%%", Freq/sum(Freq) * 100)),
vjust = -.5)+labs(x="¿Se considera pobre?",y="Frecuencia",title="Pobreza - Madres solteras jefe de hogar")
View(count)
count$Var1<-c("Si","No")
count<-table(total$P5230)
count<-as.data.frame(count)
ggplot(count, aes(x = Var1, y = Freq)) +
geom_bar(stat = "identity",colour="lightcoral",fill="lightcoral") +
geom_text(aes(label = sprintf("%.2f%%", Freq/sum(Freq) * 100)),
vjust = -.5)+labs(x="¿Se considera pobre?",y="Frecuencia",title="Pobreza - Madres solteras jefe de hogar")
View(count)
count$Var1
count$Var1<-NULL
count$Var1<-c("Si","No")
View(count)
ggplot(count, aes(x = Var1, y = Freq)) +
geom_bar(stat = "identity",colour="lightcoral",fill="lightcoral") +
geom_text(aes(label = sprintf("%.2f%%", Freq/sum(Freq) * 100)),
vjust = -.5)+labs(x="¿Se considera pobre?",y="Frecuencia",title="Pobreza - Madres solteras jefe de hogar")
count<-table(total$P5230)
count<-as.data.frame(count)
ggplot(count, aes(x = Var1, y = Freq)) +
geom_bar(stat = "identity",colour="lightcoral",fill="lightcoral") +
geom_text(aes(label = sprintf("%.2f%%", Freq/sum(Freq) * 100)),
vjust = -.5)+labs(x="¿Se considera pobre?",y="Frecuencia",title="Pobreza - Madres solteras jefe de hogar")
count$Var1<-c("Si","No")
View(count)
count<-table(total$P5230)
count<-as.data.frame(count)
count$Var1<-c("Si","No")
ggplot(count, aes(x = Var1, y = Freq)) +
geom_bar(stat = "identity",colour="lightcoral",fill="lightcoral") +
geom_text(aes(label = sprintf("%.2f%%", Freq/sum(Freq) * 100)),
vjust = -.5)+labs(x="¿Se considera pobre?",y="Frecuencia",title="Pobreza - Madres solteras jefe de hogar")
rm(list=ls())
library(DataCombine)
library(MASS)
library(nnet)
library(igraph)
library(ggplot2)
library(network)
library(GGally)
library(sna)
setwd("D:/Documents/GitHub/madresSolteras")
ComposicionHogar<-read.csv2("Caracteristicas y composicion del hogar/Características y composición del hogar.csv", header=T, sep=",")
#Seleccionar mujeres
Mujeres<-data.frame(ComposicionHogar)
Mujeres<-subset(Mujeres,ComposicionHogar$P6020==2)
#Seleccionar mujeres solteras
MujeresSolteras<-data.frame(Mujeres)
MujeresSolteras<-subset(MujeresSolteras,Mujeres$P5502==5|Mujeres$P5502==3|Mujeres$P5502==4)
#Filtrador para madres solteras
ForiLasting<-nrow(MujeresSolteras)
CheckDir<-0
#Crear dataframe vacío para el resultado
MadresSolteras<-MujeresSolteras[1,]
MadresSolteras<-MadresSolteras[-1,]
#Verificar que se estén comparando personas de la misma casa
for(i in 1:ForiLasting){
if(CheckDir!=MujeresSolteras$DIRECTORIO[i]){
CheckDir<-MujeresSolteras$DIRECTORIO[i]
#Base de datos transitoria que va separando las madres solteras y posteriormente las agrega al MadresSolteras que es el dataframe final
transitoria<-data.frame(MujeresSolteras)
transitoria<-subset(transitoria,MujeresSolteras$DIRECTORIO==CheckDir)
ForjLasting<-nrow(transitoria)
#Ciclo for para comparar el orden de la persona que es la madre efectivamente si viva en el hogar, de ser así guardar
for (j in 1:ForjLasting){
for (k in 1:ForjLasting){
if(transitoria$P6083S1[j]==transitoria$ORDEN[k]){
MadresSolteras<-rbind2(MadresSolteras,transitoria[k,])
}
}
}
}
}
#Tomar los directorios de las madres solteras
id<-as.vector(MadresSolteras$DIRECTORIO)
#Volverlos únicos ya que pueden haber varias madres solteras en un mismo hogar
id<-unique(id)
ForhLasting<-length(id)
#Dataframe vacío
HogaresMadresSolteras<-ComposicionHogar[1,]
HogaresMadresSolteras<-HogaresMadresSolteras[-1,]
transito2<-ComposicionHogar[1,]
transito2<-transito2[-1,]
#Comparador de direcciones con la base de datos total para retomar los núcleos familiares de cada madre soltera
for(h in 1:ForhLasting){
transito2<-subset(ComposicionHogar,ComposicionHogar$DIRECTORIO==id[h])
HogaresMadresSolteras<-rbind2(HogaresMadresSolteras,transito2)
}
HogaresMadresSolteras<-HogaresMadresSolteras[!duplicated(HogaresMadresSolteras[c('DIRECTORIO','ORDEN')]),]
#Se procede ahora a separar las variables a utilizar y verificar que la madre posea registro en todas esas variables a observar
#Se cargan los datos faltantes
CondVida<-read.csv2("Condiciones de vida del hogar y tenencia de bienes/Condiciones de vida del hogar y tenencia de bienes.csv",header=T,sep=",")
DatosVivienda<-read.csv2("Datos de la vivienda/Datos de la vivienda.csv", header=T, sep=",")
Educacion<-read.csv2("Educacion/Educacion.csv", header=T, sep=",")
FuerzaTrabajo<-read.csv2("Fuerza de trabajo/Fuerza de trabajo.csv", header=T, sep=",")
Salud<-read.csv2("Salud/Salud.csv", header=T, sep=",")
ServiciosHogar<-read.csv2("Servicios del hogar/Servicios del hogar.csv", header=T, sep=",")
TIC<-read.csv2("Tecnologias de informacion y comunicacion/Tecnologias de informacion y comunicacion.csv", header=T, sep=",")
FinanHogar<-read.csv2("Tenencia y financiacion de la vivienda que ocupa el hogar/Tenencia y financiacion de la vivienda que ocupa el hogar.csv", header=T, sep=",")
#Se resumen las tablas para que sólo tengan las variables de interés
DatosVivienda<-subset(DatosVivienda,select=c(DIRECTORIO, ORDEN, CANT_HOG_COMPLETOS, P8520S1A1))
ServiciosHogar<-subset(ServiciosHogar,select=c(DIRECTORIO, ORDEN, I_HOGAR))
Salud<-subset(Salud,select=c(DIRECTORIO, ORDEN, P6127, P6142))
Educacion<-subset(Educacion, select=c(DIRECTORIO, ORDEN, P8587))
FuerzaTrabajo<-subset(FuerzaTrabajo, select=c(DIRECTORIO, ORDEN, P6240))
TIC<-subset(TIC, select=c(DIRECTORIO, ORDEN, P1084))
FinanHogar<-subset(FinanHogar, select=c(DIRECTORIO, ORDEN, P5095))
CondVida<-subset(CondVida, select=c(DIRECTORIO, ORDEN, P9030, P5230,P9090))
MadresSolteras<-subset(MadresSolteras, select=c(DIRECTORIO, ORDEN,P6040,P1895,P1896,P1897,P1898,P1899, P1901, P1902,P1903,P1904,P1905,P6083S1))
#Procedo a usar la librería datacombine(la cargo al comienzo) que incluye la función "dMerge" la cuál permite eliminar duplicados al hacer un merge
#Se combinan todos los datos con todas las variables y se garantiza que cada madre soltera a evaluar posea todas las variables para el análisis, de no ser así se descarta.
total<-dMerge(MadresSolteras,CondVida,by=c("DIRECTORIO","ORDEN"),dropDups = TRUE)
total<-dMerge(total,FinanHogar,by=c("DIRECTORIO","ORDEN"),dropDups = TRUE)
total<-dMerge(total,TIC,by=c("DIRECTORIO","ORDEN"),dropDups = TRUE)
total<-dMerge(total,FuerzaTrabajo,by=c("DIRECTORIO","ORDEN"),dropDups = TRUE)
total<-dMerge(total,Educacion,by=c("DIRECTORIO","ORDEN"),dropDups = TRUE)
total<-dMerge(total,Salud,by=c("DIRECTORIO","ORDEN"),dropDups = TRUE)
total<-dMerge(total,ServiciosHogar,by=c("DIRECTORIO","ORDEN"),dropDups = TRUE)
total<-dMerge(total,DatosVivienda,by=c("DIRECTORIO","ORDEN"),dropDups = TRUE)
#Eliminar unos datos alterados por el merge
total<-total[!duplicated(total[c('DIRECTORIO','ORDEN')]),]
#1126 datos para el análisis y 23 variables, revisar que estén todas
#Tomar todos los datos cómo numéricos
total<- data.frame(lapply(total, function(x) as.numeric(as.character(x))))
#Eliminar NA o infinitos de el total de los datos
total<-subset(total, total$P8587!=Inf)
total<-subset(total, total$P8520S1A1!=Inf)
total<-subset(total,total$P1896!=99)
total<-subset(total, total$I_HOGAR!=0)
total<-subset(total, total$P8520S1A1!=8|total$P8520S1A1!=9)
CheckDir<-0
vecprom<-c()
vechijos<-c()
for(i in 1:nrow(total)){
if(CheckDir!=total$DIRECTORIO[i]){
CheckDir<-total$DIRECTORIO[i]
transitoria<-data.frame(HogaresMadresSolteras)
transitoria<-subset(transitoria,HogaresMadresSolteras$DIRECTORIO==CheckDir)
edad<-0
hijos<-0
for (k in 1:nrow(transitoria)){
if(total$ORDEN[i]==transitoria$P6083S1[k]){
hijos<-hijos+1
edad<-edad+transitoria$P6040[k]
}
}
vechijos[i]<-hijos
vecprom[i]<-edad/hijos
}
}
total<-cbind2(total,vecprom)
total<-cbind2(total,vechijos)
total$P6083S1<-NULL
colnames(total)[27]<-"cantidad_hijos"
colnames(total)[26]<-"prom_edad_hijos"
attach(total)
modeloTotal<-lm(P1895~P6040+P1896+P1897+P1898+P1899+P1901+P1902+P1903+P1904+P1905+P9030+P5230+P9090+P5095+P1084+P6240+P8587+P6127+P6142+I_HOGAR+CANT_HOG_COMPLETOS+P8520S1A1+prom_edad_hijos+cantidad_hijos,data=total,na.action=na.exclude)
modeloTotalBack<-stepAIC(object=modeloTotal, trace=FALSE, direction="backward", k=2)
modeloLimpio<-lm(P1895~P1896+P1897+P1898+P1899+P1901+P1905+P9030+P5095+prom_edad_hijos+P8520S1A1,data=total,na.action=na.exclude)
#Modelo transformado para garantizar que los mayores valores sean los mejores en cuánto a calidad de vida
modeloTransFinal<-lm(P1895~P1896+P1897+P1898+P1899+P1901+P1905+I(-P9030+5)+I(-P5095+7)+prom_edad_hijos+P8520S1A1,data=total,na.action=na.exclude)
#Modelo para 2016
modeloAdapt<-lm(P1895~P1896+P1897+P1898+P1899+P1901+I(-P9030+5)+I(-P5095+7)+prom_edad_hijos+P8520S1A1,data=total,na.action=na.exclude)
FamNet<-function(direccion){
transitoria<-data.frame(HogaresMadresSolteras)
transitoria<-subset(transitoria,HogaresMadresSolteras$DIRECTORIO==direccion)
coorgraph<-c()
leyendas<-c()
color<-c()
for (j in 1:nrow(transitoria)){
for (k in 1:nrow(transitoria)){
if (transitoria$P6083[k]==1){
if(transitoria$ORDEN[j]==transitoria$P6083S1[k]){
coorgraph<-append(coorgraph,c(transitoria$ORDEN[j],transitoria$ORDEN[k]))
color<-append(color,1)
}
}
if (transitoria$P6071[k]==1){
if(transitoria$ORDEN[j]==transitoria$P6071S1[k]){
coorgraph<-append(coorgraph,c(transitoria$ORDEN[j],transitoria$ORDEN[k]))
color<-append(color,2)
}
}
if (transitoria$P6081[k]==1){
if(transitoria$ORDEN[j]==transitoria$P6081S1[k]){
coorgraph<-append(coorgraph,c(transitoria$ORDEN[j],transitoria$ORDEN[k]))
color<-append(color,3)
}
}
}
if(transitoria$P6051[j]==7){
coorgraph<-append(coorgraph,c(1,transitoria$ORDEN[j]))
color<-append(color,4)
}
leyendas<-append(leyendas,transitoria$P6051[j])
}
color[color==1]<-"gold"
color[color==2]<-"red"
color[color==3]<-"green"
color[color==4]<-"black"
leyendas[leyendas==1]<-"Jefe(a) de hogar"
leyendas[leyendas==2]<-"Cónyuge"
leyendas[leyendas==3]<-"Hijo(a)"
leyendas[leyendas==4]<-"Nieto(a)"
leyendas[leyendas==5]<-"Padre/Madre"
leyendas[leyendas==6]<-"Suegro(a)"
leyendas[leyendas==7]<-"Hermano(a)"
leyendas[leyendas==8]<-"Yerno/Nuera"
leyendas[leyendas==9]<-"Otro pariente del jefe"
leyendas[leyendas==10]<-"Empleado(a) del servicio doméstico"
leyendas[leyendas==11]<-"Parientes del servicio doméstico"
leyendas[leyendas==12]<-"Trabajador"
leyendas[leyendas==13]<-"Pensionista"
leyendas[leyendas==14]<-"Otro pariente"
g1<-graph(coorgraph)
plot(g1,edge.width=2,edge.arrow.size=0,edge.color=color,edge.label.color="steelblue4",edge.label.font=3,edge.lty="solid",
vertex.color=c("gold",rep("pink",length(coorgraph)-1)),vertex.shape="rectangle",
vertex.size=100,vertex.label.font=4,vertex.label=leyendas,
vertex.frame.color="black",vertex.label.color="black",frame=TRUE,vertex.label.dist=0,
vertex.label.cex=1, edge.curved=0.4,edge.label.family="sans")
title(paste("Núcleo familiar de",direccion), sub = "Copyright © 2018 UNALMED",
cex.main = 1.5, family="serif",font.main= 2, col.main= "black",
cex.sub = 0.75, font.sub = 3, col.sub = "red")
legend(-2.7, -0.5, legend=c("Madre-hijo","Cónyuge","Padre-hijo","Hermano"),
pch = c(19,19),col=c("gold","red","green","black"), cex=0.8,pt.cex=1.5)
}
predictor<-function(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10){
y<-as.numeric(coefficients(modeloTransFinal)[2]*a1+coefficients(modeloTransFinal)[3]*a2+
coefficients(modeloTransFinal)[4]*a3+coefficients(modeloTransFinal)[5]*a4
+coefficients(modeloTransFinal)[6]*a5+coefficients(modeloTransFinal)[7]*a6
+coefficients(modeloTransFinal)[8]*a7+coefficients(modeloTransFinal)[9]*a8
+coefficients(modeloTransFinal)[10]*a9+coefficients(modeloTransFinal)[11]*a10)
return(round(y))
}
library(DataCombine)
library(MASS)
#Limpieza bases 2016
setwd("D:/Documents/GitHub/madresSolteras")
condi2016<-read.delim("2016/Condiciones de vida del hogar y tenencia de bienes/Condiciones de vida del hogar y tenencia de bienes.txt",header=T)
compo2016<-read.delim("2016/Caracteristicas y composicion del hogar/Caracteristicas y composicion del hogar.txt",header=T)
finanHogar2016<-read.delim("2016/Tenencia y financiacion de la vivienda que ocupa el hogar/Tenencia y financiacion de la vivienda que ocupa el hogar.txt",header=T)
dataVivi2016<-read.delim("2016/Datos de la vivienda/Datos de la vivienda.txt",header=T)
Mujeres2016<-data.frame(compo2016)
Mujeres2016<-subset(Mujeres2016,compo2016$P6020==2)
MujeresSolteras2016<-data.frame(Mujeres2016)
MujeresSolteras2016<-subset(MujeresSolteras2016,Mujeres2016$P5502==5|Mujeres2016$P5502==3|Mujeres2016$P5502==4)
MujeresSolteras2016[is.na(MujeresSolteras2016)]<-1.66666666666
#Filtrador para madres solteras
ForiLasting<-nrow(MujeresSolteras2016)
CheckDir<-0
#Crear dataframe vacío para el resultado
MadresSolteras2016<-MujeresSolteras2016[1,]
MadresSolteras2016<-MadresSolteras2016[-1,]
#Verificar que se estén comparando personas de la misma casa
for(i in 1:ForiLasting){
if(CheckDir!=MujeresSolteras2016$DIRECTORIO[i]){
CheckDir<-MujeresSolteras2016$DIRECTORIO[i]
#Base de datos transitoria que va separando las madres solteras y posteriormente las agrega al MadresSolteras que es el dataframe final
transitoria<-data.frame(MujeresSolteras2016)
transitoria<-subset(transitoria,MujeresSolteras2016$DIRECTORIO==CheckDir)
ForjLasting<-nrow(transitoria)
#Ciclo for para comparar el orden de la persona que es la madre efectivamente si viva en el hogar, de ser así guardar
for (j in 1:ForjLasting){
for (k in 1:ForjLasting){
if(transitoria$P6083S1[j]==transitoria$ORDEN[k]){
MadresSolteras2016<-rbind2(MadresSolteras2016,transitoria[k,])
}
}
}
}
}
#Tomar los directorios de las madres solteras
id<-as.vector(MadresSolteras2016$DIRECTORIO)
#Volverlos únicos ya que pueden haber varias madres solteras en un mismo hogar
id<-unique(id)
ForhLasting<-length(id)
#Dataframe vacío
HogaresMadresSolteras2016<-compo2016[1,]
HogaresMadresSolteras2016<-HogaresMadresSolteras2016[-1,]
transito2<-compo2016[1,]
transito2<-transito2[-1,]
#Comparador de direcciones con la base de datos total para retomar los núcleos familiares de cada madre soltera
for(h in 1:ForhLasting){
transito2<-subset(compo2016,compo2016$DIRECTORIO==id[h])
HogaresMadresSolteras2016<-rbind2(HogaresMadresSolteras2016,transito2)
}
HogaresMadresSolteras2016<-HogaresMadresSolteras2016[!duplicated(HogaresMadresSolteras2016[c('DIRECTORIO','ORDEN')]),]
dataVivi2016<-subset(dataVivi2016,select=c(DIRECTORIO,ORDEN,P8520S1A1))
condi2016<-subset(condi2016,select=c(DIRECTORIO, ORDEN, P5676S4,P5676S5,P5676S7,P5676S6,P5677, P9030))
finanHogar2016<-subset(finanHogar2016,select=c(DIRECTORIO, ORDEN, P5095))
MadresSolteras2016<-subset(MadresSolteras2016, select=c(DIRECTORIO, ORDEN))
total2016<-dMerge(MadresSolteras2016,condi2016,by=c("DIRECTORIO","ORDEN"),dropDups = TRUE)
total2016<-dMerge(total2016,finanHogar2016,by=c("DIRECTORIO","ORDEN"),dropDups = TRUE)
total2016<-dMerge(total2016,dataVivi2016,by=c("DIRECTORIO","ORDEN"),dropDups = TRUE)
total2016<-total2016[!duplicated(total2016[c('DIRECTORIO','ORDEN')]),]
total2016<-na.omit(total2016)
total2016<-total2016[!duplicated(total2016[c('DIRECTORIO','ORDEN')]),]
total2016<- data.frame(lapply(total2016, function(x) as.numeric(as.character(x))))
total2016<-subset(total2016, total2016$P8520S1A1!=8|total2016$P8520S1A1!=9)
total2016$P5676S4<-(total2016$P5676S4-1)*(10/3)
total2016$P5676S5<-(total2016$P5676S5-1)*(10/3)
total2016$P5676S6<-(total2016$P5676S6-1)*(10/3)
total2016$P5676S7<-(total2016$P5676S7-1)*(10/3)
total2016$P5677<-(((-total2016$P5677+5)-1)*(10/3))
total2016$P9030<-(-total2016$P9030+5)
total2016$P5095<-(-total2016$P5095+6)+1
load("ShinyApp/www/LastPredictor")
predictorAdapt<-function(a1,a2,a3,a4,a5,a6,a7,a8,a9){
y<-as.numeric(coefficients(modeloAdapt)[2]*a1+coefficients(modeloAdapt)[3]*a2+
coefficients(modeloAdapt)[4]*a3+coefficients(modeloAdapt)[5]*a4
+coefficients(modeloAdapt)[6]*a5+coefficients(modeloAdapt)[7]*a6
+coefficients(modeloAdapt)[8]*a7+coefficients(modeloAdapt)[9]*a8
+coefficients(modeloAdapt)[10]*a9)
return(round(y))
}
HogaresMadresSolteras2016[is.na(HogaresMadresSolteras2016)]<-1.66666666666
CheckDir<-0
vecprom2016<-c()
for(i in 1:nrow(total2016)){
if(CheckDir!=total2016$DIRECTORIO[i]){
CheckDir<-total2016$DIRECTORIO[i]
transitoria<-data.frame(HogaresMadresSolteras2016)
transitoria<-subset(transitoria,HogaresMadresSolteras2016$DIRECTORIO==CheckDir)
edad<-0
hijos<-0
for (k in 1:nrow(transitoria)){
if(total2016$ORDEN[i]==transitoria$P6083S1[k]){
hijos<-hijos+1
edad<-edad+transitoria$P6040[k]
}
}
vecprom2016[i]<-edad/hijos
}
}
total2016<-cbind2(total2016,vecprom2016)
colnames(total2016)[11]<-"prom_edad_hijos"
attach(total2016)
vecsas<-c()
for(i in 1:nrow(total2016)){
a<-predictorAdapt(P5676S4[i],P5676S5[i],P5676S7[i],P5676S6[i],P5677[i],P9030[i],P5095[i],prom_edad_hijos[i],P8520S1A1[i])
vecsas[i]<-a
}
total2016<-cbind2(total2016,vecsas)
colnames(total2016)[12]<-"SatisfaccionEst"
total2016<-na.omit(total2016)
save.image("LastPredictor")
sd(SatisfaccionEst)
View(total2016)
sd(total2016$SatisfaccionEst)
attach(total2016)
sd(SatisfaccionEst)
sd(SatisfaccionEst)^2
install.packages(c("car","MASS"),
dependencies = TRUE)
library(MASS)
library(car)
x<-total2016$SatisfaccionEst
fitdistr(x,"normal")
param<-fitdistr(x,"normal")
qqPlot(x,distribution = "norm",mean = param$estimate[1],sd = param$estimate[2],
pch=19,main="QQ-Plot Distribución")
install.packages("car")
library(car)
qqPlot(x,distribution = "norm",mean = param$estimate[1],sd = param$estimate[2],
pch=19,main="QQ-Plot Distribución")
install.packages("xtable")
aux1<-c("Ninguno","Preescolar","Básica Primaria (1º - 5º)","Básica secundaria (6º--9º)",	Media (10º--13º)
6	Técnico sin título
7	Técnico con título
8	Tecnológico sin título
9	Tecnológico con título
10	Universitario sin titulo
11	Universitario con titulo
12	Postgrado sin titulo
13	Postgrado con titulo
aux1<-c("Ninguno","Preescolar","Básica Primaria (1º - 5º)","Básica secundaria (6º--9º)","Media (10º--13º)","Técnico sin título","Técnico con título","Tecnólogo sin título","Tecnólogo con título","Universitario sin titulo","Universitario con titulo","Postgrado sin titulo","Postgrado con titulo")
aux2<-c(1:13)
eduley<-as.data.frame(aux1)
colnames(eduley)[1]<-"Número"
eduley<-as.data.frame(aux2)
colnames(eduley)[1]<-"Número"
View(eduley)
eduley$Grado<-aux1
library(xtable)
xtable(eduley)
xtable(eduley,type="html")
print.xtable(newobject, type="html", file="filename.tex")
print.xtable(eduley, type="html", file="filename.tex")
print(xtable(eduley), type="html")
View(HogaresMadresSolteras)
